#!/bin/sh

postrun() {
	wallpaper
	killall dunst >/dev/null 2>&1
	setsid -f dunst >/dev/null 2>&1
	kill -HUP $(pgrep -u $USER "\bdwm$")
}


set_mon_on() {
    xrandr --output $1 --auto --primary
}

set_mon_off() {
    xrandr --output $1 --off
}
monitors=$(xrandr | grep " connected" | awk '{print $1}')
chosen=$(echo -e "List Monitors\nMirroring\nMulti-Monitor" | dmenu -i -l 4 -p "Select an option:")

if [ "$chosen" = "List Monitors" ]; then
	monitor=$(echo "$monitors" | dmenu -i -l 4 -p "Select monitor:")
	for m in $monitors; do
		if [ "$m" = "$monitor" ]; then
      set_mon_on "$m"
		else
      set_mon_off "$m"
		fi
	done
	notify-send "󰍺 Single monitor" "$chosen is on."

elif [ "$chosen" = "Mirroring" ]; then
	# Enable mirroring on all monitors
	primary=$(echo "$monitors" | head -n1)
	others=$(echo "$monitors" | tail -n+2)
	for monitor in $others; do
		xrandr --output "$monitor" --auto --same-as "$primary"
	done
	notify-send "󰍺 Mirroring monitors" "$primary is the primary monitor in mirroring mode."

  postrun
elif [ "$chosen" = "Multi-Monitor" ]; then
	primary=$(echo "$monitors" | dmenu -i -l 4 -p "Select primary monitor:")
	xrandr --output "$primary" --primary --auto

	for monitor in $monitors; do
		if [ "$monitor" != "$primary" ]; then
			position=$(echo -e "left-of\nright-of\nabove\nbelow" | dmenu -i -l 5 -p "Select position for $monitor:")
			xrandr --output "$monitor" --$position "$primary" --auto
		fi
	done
	notify-send "󰍺 Multi monitors" "$primary is the primary monitor in multi-monitor mode."

  postrun
else
	echo "Invalid option selected"
fi
